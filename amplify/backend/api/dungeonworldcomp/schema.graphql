type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  email: String!
}

type Source @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
}

type CharacterProfession @model @auth(rules: [{allow: public}]) {
  id: ID!
  Character: Character @belongsTo
  Profession: Profession @hasOne
}

type Profession @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String!
  source: Source! @hasOne
  damageDiceType: DiceType @hasOne
}

type Spell @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  level: Int!
  type: String!
  ongoing: Boolean
  description: String!
  source: Source! @hasOne
  profession: Profession! @hasOne
}

type CharacterSpell @model @auth(rules: [{allow: public}]) {
  id: ID!
  spell: Spell! @hasOne
  selected: Boolean
  tags: [String]
}

type CharacterGear @model @auth(rules: [{allow: public}]) {
  id: ID!
  gear: Gear! @hasOne
  uses: Int
  tags: [String]
  characterID: ID! @index(name: "byCharacter")
}

type Gear @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String!
  weight: Int!
  uses: Int
  tags: [String]
  source: Source @hasOne
}

type CharacterMove @model @auth(rules: [{allow: public}]) {
  id: ID!
  selected: Boolean
  move: Move! @hasOne
  characterID: ID! @index(name: "byCharacter")
}

type Move @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String!
  class: Profession! @hasOne
  source: Source @hasOne
}

type CharacterBond @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  bond: Bond! @hasOne
  selected: Boolean
  characterID: ID! @index(name: "byCharacter")
}

type Bond @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  class: Profession! @hasOne
}

type CharacterAbilityScore @model @auth(rules: [{allow: public}]) {
  abilityScore: AbilityScore! @hasOne
  id: ID!
  value: String!
  bonus: Int!
  tags: [String]
  characterID: ID! @index(name: "byCharacter")
}

type AbilityScore @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  shortName: String!
  debility: String!
  debilityPenalty: String!
}

type CharacterRace @model @auth(rules: [{allow: public}]) {
  id: ID!
  race: Race! @hasOne
}

type Race @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
  profession: Profession @hasOne
  source: Source! @hasOne
}

type CharacterAlignment @model @auth(rules: [{allow: public}]) {
  id: ID!
  alignment: Alignment! @hasOne
  selected: Boolean
}

type Alignment @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
  class: Profession! @hasOne
}

type DiceType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type CharacterLook @model @auth(rules: [{allow: public}]) {
  id: ID!
  look: [Look!] @hasMany(indexName: "byCharacterLook", fields: ["id"])
}

type Look @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String!
  characterlookID: ID! @index(name: "byCharacterLook")
}

type Character @model @auth(rules: [{allow: public}]) {
  userId: ID!
  id: ID!
  name: String!
  level: Int
  xp: Int
  armor: Int
  hitPointsMax: Int
  hitPointsCurrent: Int
  coin: Int
  loadMax: Int
  loadCurrent: Int
  isTemplate: Boolean
  gear: [CharacterGear] @hasMany(indexName: "byCharacter", fields: ["id"])
  sixToTenMoves: [CharacterMove] @hasMany(indexName: "byCharacter", fields: ["id"])
  twoToTenMoves: [CharacterMove] @hasMany(indexName: "byCharacter", fields: ["id"])
  startingMoves: [CharacterMove] @hasMany(indexName: "byCharacter", fields: ["id"])
  bonds: [CharacterBond] @hasMany(indexName: "byCharacter", fields: ["id"])
  abilityscores: [CharacterAbilityScore] @hasMany(indexName: "byCharacter", fields: ["id"])
  race: CharacterRace @hasOne
  alignment: CharacterAlignment @hasOne
  tags: [String]
  look: CharacterLook @hasOne
  notes: String
  CharacterProfession: CharacterProfession @hasOne
}
 