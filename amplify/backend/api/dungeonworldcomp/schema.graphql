# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User {
  id: ID!
  username: String!
  email: String!
  # Add other user-related fields as needed
}

type Character {
  owner: User
  name: String!
  class: [Class]!
  look: [Look]
  level: Int
  xp: Int
  armor: Int
  hitPointsMax: Int
  hitPointsCurrent: Int
  conditions: Int         # space for condition hack
  damage: DiceType
  tags: [Tag]             # generic place to put character-specific tags
  alignment: [Alignment]
  race: [Race]
  abilityScores: AbilityScoreBase
  bonds: [Bond]
  startingMoves: [CharacterMove]!
  twoToTenMoves: [CharacterMove]
  sixToTenMoves: [CharacterMove]
  coin: Int
  loadMax: Int
  loadCurrent: Int
  gear: [CharacterGear]
  spells: [CharacterSpell]
  isPublic: Boolean       # allow other people to view this character
  isCoreTemplate: Boolean         # is this a core class template?
}

type Class {
  name: String!
  description: String!
}

type CharacterCondition {
  condition: Condition
  selected: Boolean
  tags: [Tag]
}

type Condition {
  name: String
  description: String
  severity: ConditionSeverity
}

type ConditionSeverity {
  name: String
}

type Look {
  name: String
  description: String
  tags: [Tag]
}

type Alignment {
  name: String
  description: String
  tags: [Tag]
  class: [Class]
}

type Race {
  name: String
  description: String
  tags: [Tag]
  class: [Class]
}

type AbilityScoreBase {
  strength: AbilityScore
  dexterity: AbilityScore
  constitution: AbilityScore
  intelligence: AbilityScore
  wisdom: AbilityScore
  charisma: AbilityScore
}

type AbilityScore {
  name: String
  shortName: String
  value: Int
  bonus: Int
  debility: String
  debilityPenalty: String
  tags: [Tag]
}

type DiceType {
  name: String
}

type Tag {
  name: String
  description: String
}

type Bond {
  description: String
  tags: [Tag]
}

type CharacterMove {
  move: Move
  selected: Boolean
  tags: [Tag]
}

type Move {
  name: String!
  description: String!
  class: Class
}

type CharacterGear {
  gear: Gear
  selected: Boolean
  tags: [Tag]
}

type Gear {
  name: String!
  description: String
  uses: Int
  weight: Int
  tags: [Tag]
}

type CharacterSpell {
  spell: Spell
  selected: Boolean
  tags: [Tag]
}

type Spell {
  name: String!
  level: Int!
  type: String # Cantrip, Illusion, Evocation, Necromancy, etc
  ongoing: Boolean
  description: String!
  class: Class
}

type Query {
  getCharacter(characterId: ID!): Character
  getUserCharacters(userId: ID!): [Character]
  getCoreClassTemplates(isCoreTemplate: Boolean!): [Character]  # Return a list of all characters that are CW Core Class templates
  getClasses: Class
  getSpells: Spell
  getSpellsByClass(className: String!): [Spell]
  getDiceTypes: DiceType
  getRaces: Race
  getMoves: Move
  getMovesByClass(className: String!): [Move]
}

type Mutation {
  duplicateCharacter(characterId: ID!, newOwnerId: ID!): Character
}
