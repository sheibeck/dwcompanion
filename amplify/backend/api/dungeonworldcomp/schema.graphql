type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  email: String!
}

type Source @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
}

type CharacterProfession @model @auth(rules: [{allow: public}]) {
  id: ID!
  Character: Character @belongsTo
  Profession: Profession @hasOne
}

type Profession @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String!
  Source: Source! @hasOne
  DiceType: DiceType @hasOne
}

type Spell @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  level: Int!
  type: String!
  ongoing: Boolean
  description: String!
  Source: Source! @hasOne
  Profession: Profession! @hasOne
}

type CharacterSpell @model @auth(rules: [{allow: public}]) {
  id: ID!
  Spell: Spell! @hasOne
  selected: Boolean
  tags: [String]
  Character: Character @belongsTo
}

type CharacterGear @model @auth(rules: [{allow: public}]) {
  id: ID!
  Gear: Gear! @hasOne
  uses: Int
  tags: [String]
  Character: Character @belongsTo
}

type Gear @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String!
  weight: Int!
  uses: Int
  tags: [String]
  Source: Source @hasOne
}

type CharacterMove @model @auth(rules: [{allow: public}]) {
  id: ID!
  selected: Boolean
  Move: Move! @hasOne
  Character: Character @belongsTo
}

type Move @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String!
  Profession: Profession! @hasOne
  Source: Source @hasOne
}

type CharacterBond @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  Bond: Bond! @hasOne
  selected: Boolean
  Character: Character @belongsTo
}

type Bond @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  Profession:  Profession! @hasOne
}

type CharacterAbilityScore @model @auth(rules: [{allow: public}]) {
  AbilityScore: AbilityScore! @hasOne
  id: ID!
  value: String!
  bonus: Int!
  tags: [String]
  Character: Character @belongsTo
}

type AbilityScore @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  shortName: String!
  debility: String!
  debilityPenalty: String!
}

type CharacterRace @model @auth(rules: [{allow: public}]) {
  id: ID!
  Race: Race! @hasOne
  Character: Character @belongsTo
}

type Race @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
  Profession: Profession @hasOne
  Source: Source! @hasOne
}

type CharacterAlignment @model @auth(rules: [{allow: public}]) {
  id: ID!
  Alignment: Alignment! @hasOne
  selected: Boolean
  Character: Character @belongsTo
}

type Alignment @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
  Profession:  Profession! @hasOne
}

type DiceType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type CharacterLook @model @auth(rules: [{allow: public}]) {
  id: ID!
  Look: Look! @hasOne
  Character: Character @belongsTo
}

type Look @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String!
}

type Character @model @auth(rules: [{allow: public}]) {
  userId: ID!
  id: ID!
  name: String!
  level: Int
  xp: Int
  armor: Int
  hitPointsMax: Int
  hitPointsCurrent: Int
  coin: Int
  loadMax: Int
  loadCurrent: Int
  isTemplate: Boolean
  tags: [String]
  notes: String
  CharacterGear: [CharacterGear] @hasMany
  MovesStarting: [CharacterMove] @hasMany
  MovesTwoToTen: [CharacterMove] @hasMany
  MovesSixToTen: [CharacterMove] @hasMany
  CharacterBonds: [CharacterBond] @hasMany
  CharacterAbilityScores: [CharacterAbilityScore] @hasMany
  CharacterRace: CharacterRace @hasOne
  CharacterAlignment: CharacterAlignment @hasOne
  CharacterLooks: [CharacterLook] @hasMany
  CharacterProfession: CharacterProfession @hasOne
  CharacterSpells: [CharacterSpell] @hasMany
} 

type Query {
  listCharactersByUser(args: String): String # your custom queries here
}