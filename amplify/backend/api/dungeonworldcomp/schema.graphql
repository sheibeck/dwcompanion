# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User {
  id: ID!
  name: String!
  email: String!
  # Add other user-related fields as needed
}

type Source {
  id: ID!
  name: String!
}

type Class {
  id: ID!
  name: String!
  description: String!
  source: Source!
}

type Spell {
  id: ID!
  name: String!
  level: Int!
  type: String!
  ongoing: Boolean
  description: String!
  source: Source!
  class: Class!
}

type Spells {
  id: ID!
  selected: Boolean
  spell: Spell!
}

type Gear {
  id: ID!
  description: String!
  weight: Int!
  uses: Int
  tags: [String]
}

type CharacterMove {
  id: ID!
  selected: Boolean
  move: Move!
}

type Move {
  id: ID!
  description: String!
  class: Class!
}

type Bonds {
  id: ID!
  description: String
  class: Class!
}

type Abilityscores {
  id: ID!
  name: String!
  shortName: String!
  value: String!
  bonus: Int!
  debility: String!
  debilityPenalty: String!
}

type Race {
  id: ID!
  name: String
  description: String
  class: Class
  source: Source!
}

type Alignment {
  id: ID!
  name: String
  description: String
  class: Class!
}

type DiceType {
  id: ID!
  name: String
}

type Condition {
  id: ID!
  description: String!
}

type ConditionTypes {
  id: ID!
  name: String!
  conditions: [Condition]
}

type Look {
  id: ID!
  name: String!
  description: String!
  class: Class!
}

type Character {
  ownerId: ID!
  id: ID!
  name: String!
  level: Int
  xp: Int
  armor: Int
  hitPointsMax: Int
  hitPointsCurrent: Int
  coin: Int
  loadMax: Int
  loadCurrent: Int
  isPublic: Boolean
  isCoreTemplate: Boolean
  spells: [Spells]
  gear: [Gear]
  sixToTenMoves: [CharacterMove]
  twoToTenMoves: [CharacterMove]
  startingMoves: [CharacterMove]
  bonds: [Bonds]
  abilityscores: [Abilityscores]
  race: Race
  alignment: Alignment
  tags: [String]
  dicetype: DiceType
  conditionTypes: [ConditionTypes]
  look: [Look]
  class: Class
  notes: String
}

type Query {
  getCharacter(characterId: ID!): Character
  getUserCharacters(userId: ID!): [Character]
  getCoreClassTemplates: [Character]            # Return a list of all characters that are CW Core Class templates
  getClasses: [Class]
  getSpells: [Spell]
  getSpellsByClass(className: String!): [Spell]
  getDiceTypes: [DiceType]
  getRaces: [Race]
  getMoves: [Move]
  getMovesByClass(className: String!): [Move]
}

type Mutation {
  duplicateCharacter(characterId: ID!, newOwnerId: ID!): Character
}